{
  "strategy": "zero_shot",
  "prompt_prefix": "DROP TABLE IF EXISTS catch;\nDROP TABLE IF EXISTS fish;\nDROP TABLE IF EXISTS fly;\nDROP TABLE IF EXISTS native_fish;\nDROP TABLE IF EXISTS owned_fly;\nDROP TABLE IF EXISTS person;\nDROP TABLE IF EXISTS state;\n\nCREATE TABLE catch (\n  catch_id INTEGER PRIMARY KEY,\n  fisherman INTEGER NOT NULL,\n  species INTEGER NOT NULL,\n  fly INTEGER NOT NULL,\n  length DECIMAL(4,2),\n  weight DECIMAL(4,2),\n  catch_time DATETIME,\n  state CHAR(2),\n  released TINYINT,\n  FOREIGN KEY (fisherman) REFERENCES person (person_id) ON DELETE RESTRICT ON UPDATE RESTRICT,\n  FOREIGN KEY (species) REFERENCES fish (fish_id) ON DELETE RESTRICT ON UPDATE RESTRICT,\n  FOREIGN KEY (fly) REFERENCES fly (fly_id) ON DELETE RESTRICT ON UPDATE RESTRICT,\n  FOREIGN KEY (state) REFERENCES state (state_code) ON DELETE RESTRICT ON UPDATE RESTRICT\n);\n\nCREATE TABLE fish (\n  fish_id INTEGER PRIMARY KEY,\n  species VARCHAR(45) NOT NULL,\n  avg_length DECIMAL(4,2),\n  avg_weight DECIMAL(4,2)\n);\n\nCREATE TABLE fly (\n  fly_id INTEGER PRIMARY KEY,\n  brand VARCHAR(45),\n  price DECIMAL(3,2),\n  homemade TINYINT DEFAULT 0\n);\n\nCREATE TABLE native_fish (\n  state CHAR(2) NOT NULL,\n  fish_id INTEGER NOT NULL,\n  PRIMARY KEY (state, fish_id),\n  FOREIGN KEY (fish_id) REFERENCES fish (fish_id) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (state) REFERENCES state (state_code) ON DELETE RESTRICT ON UPDATE RESTRICT\n);\n\nCREATE TABLE owned_fly (\n  fisherman INTEGER NOT NULL,\n  fly INTEGER NOT NULL,\n  PRIMARY KEY (fisherman, fly),\n  FOREIGN KEY (fly) REFERENCES fly (fly_id) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (fisherman) REFERENCES person (person_id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\nCREATE TABLE person (\n  person_id INTEGER NOT NULL PRIMARY KEY,\n  name VARCHAR(45) NOT NULL\n);\n\nCREATE TABLE state (\n  state_code CHAR(2) NOT NULL PRIMARY KEY\n);\n\n--- Using valid sqlite, answer the following questions for the tables provided above.\nQuestion: ",
  "questionResults": [
    {
      "question": "What is the most caught fish species?",
      "sql": "select species, COUNT(*) as num_catches\nfrom catch\ngroup by species\norder by num_catches desc\nlimit 1;",
      "queryResult": "[(5, 10)]",
      "friendlyResponse": "The most caught fish species is not specified with the response given: [(5, 10)].",
      "error": "None"
    },
    {
      "question": "Where was the largest fish caught recorded in the database?",
      "sql": "select catch.state\nfrom catch\nwhere catch.weight = (select max(weight) from catch)",
      "queryResult": "[('NV',), ('NV',), ('NV',), ('NV',), ('NV',)]",
      "friendlyResponse": "The largest fish caught was recorded in Nevada.",
      "error": "None"
    },
    {
      "question": "Which fisherman has been most successful",
      "sql": "select catch.fisherman, COUNT(*) as catch_count\nfrom catch\ngroup by catch.fisherman\norder by catch_count desc\nlimit 1;",
      "queryResult": "[(10, 5)]",
      "friendlyResponse": "The most successful fisherman is the one with 10 catches and 5 fish.",
      "error": "None"
    },
    {
      "question": "Are there any anglers that tend to catch fish larger than average?",
      "sql": "select person.name\nfrom person\njoin catch on catch.fisherman = person.person_id\njoin fish on fish.fish_id = catch.species\nwhere catch.length > fish.avg_length;",
      "queryResult": "[('Fisher Mann',), ('Emily Brown',), ('Rusty Shackleford',), ('Jessica Martinez',), ('David Anderson',), ('Emily Brown',), ('Rusty Shackleford',), ('Jessica Martinez',), ('David Anderson',), ('Sarah Taylor',), ('Rusty Shackleford',), ('Jessica Martinez',), ('David Anderson',), ('Sarah Taylor',), ('Matthew Thomas',), ('Fisher Mann',), ('Emily Brown',), ('Rusty Shackleford',), ('Jessica Martinez',), ('David Anderson',), ('Emily Brown',), ('Rusty Shackleford',), ('Jessica Martinez',), ('David Anderson',), ('Sarah Taylor',)]",
      "friendlyResponse": "Yes, there are several anglers who tend to catch fish larger than average.",
      "error": "None"
    },
    {
      "question": "Is there a brand of flies that does better at catching fish?",
      "sql": "select fly.brand, COUNT(catch.catch_id) AS catch_count\nFROM fly\nLEFT JOIN catch ON fly.fly_id = catch.fly\nGROUP BY fly.brand\nORDER BY catch_count DESC;",
      "queryResult": "[(None, 20), ('Umpqua', 10), ('RoundRocks', 10), ('Betts', 10)]",
      "friendlyResponse": "Yes, Umpqua, RoundRocks, and Betts are brands of flies that have shown to do better at catching fish.",
      "error": "None"
    },
    {
      "question": "What is the ratio of native to non-native fish caught?",
      "sql": "SELECT (SELECT COUNT(*) FROM catch INNER JOIN native_fish ON catch.species = native_fish.fish_id) / (SELECT COUNT(*) FROM catch INNER JOIN native_fish ON catch.species = native_fish.fish_id OR native_fish.fish_id IS NULL) AS ratio_of_native_to_non_native_fish_caught;",
      "queryResult": "[(1,)]",
      "friendlyResponse": "The ratio of native to non-native fish caught is 1:0.",
      "error": "None"
    },
    {
      "question": "What time of day is best for catching fish?",
      "error": "near \"in\": syntax error"
    },
    {
      "question": "For anglers who use home tied flies, what is the ratio of fish released vs fish kept?",
      "sql": "select (COUNT(DISTINCT CASE WHEN fly.homemade = 1 THEN catch.catch_id END) / COUNT(DISTINCT CASE WHEN fly.homemade = 1 THEN catch.catch_id END)) AS ratio\nFROM catch\nJOIN fly ON catch.fly = fly.fly_id\nWHERE catch.released = 1;",
      "queryResult": "[(1,)]",
      "friendlyResponse": "Anglers who use home tied flies typically release 100% of the fish they catch.",
      "error": "None"
    }
  ]
}